*** React
- 프론트개발에 사용되는 언어
- javascript 라이브러리
- JSX문법을 추가로 사용합니다. - React.createElement(); 로 변환
- create-react-app 기본프로젝트를 주로 사용
  npm install -g yarn [enter]  -> 최초 한번만 실행 (yarn 설치)
  yarn create react-app <프로젝트이름> [enter]

  프로젝트폴더>yarn start [enter] ==> 프로젝트 실행
  실행될때 시작되는 문서이름은 index.js

- JSX 는 기본적으로 html 사용법과 비슷
- 스타일속성에서 -를 사용하지 못해서 -를 없애고 다음글자를 대문자로 사용합니다.
  예) background-color  =>  backgroundColor
- 이벤트: 예) onclick => onClick 처럼 on다음글자를 대문자로 사용합니다.
- 사용자 컴포넌트를 만들어서 구현합니다.
- 컴포넌트 -> element를 만듭니다.
- 만들어진 element는 변경이 불가능합니다.
- 변경하려면 컴포넌트로 element를 다시만들어 기존에 만들어진 element와 교체시킵니다.
- virturlDOM 의 개념을 사용합니다.
- React의 모든것은 자바스크립트로 구현이 가능합니다. React에서는 이것을 조금 더 쉽게 사용하도록 만든것입니다.
- 변수값이 변경되었을때 재렌더링을 하려면 useState()를 사용해야합니다.
- 변수선언시 useState를 사용해 변수를 만들면 변수값이 변경시 재 랜더링합니다.
예) const [count, setCount] = useState(0);
    count:변수이름, setCount: 변수값변경함수(setter), useState(0): 초기값 0
- React의 JSX에서는 모두 종료태그가 있습니다.


[ch12] state 끌어올리기 
- 하위컴포넌트에서 사용하는 변수를 상위컴포넌트로 가져오는것
- shared state (변수값 공유하기)
- 여러 하위컴포넌트에서 같은값을 사용하려면 반드시 상위컴포넌트에 변수를 선언해서 props로 전달받아 사용하여야 합니다.

[ch13] 합성 vs 상속
합성 - 여러개의 컴포넌트를 하나로 합치는 것

[ch14] 컨텍스트
우리는 하위컴포넌트로 값을 전달할때 props에 담아서 전달하였습니다.
-> 단계가 많아졌을때 계속해서 props에 담는 과정이 불편하다.
-> 컨텍스트: 값을 props에 담지않고 곧바로 하위 element에 전달할 수 있다.

컨텍스트를 사용하는 경우는 루트와 최하위 컴포넌트에 변수를 사용할 때
중간단계에도 변수값을 사용한다면 props로 전달하는 것이 유리합니다.

-- 컨텍스트 생성
const MyContext = React.CreateContext(기본값);
-- 하위컴포넌트에서 받을수 있는 값을 세팅
<MyContext.Provider value={}>
  하위컴포넌트
</MyContext.Provider>
value안에 여러가지 값을 넣으려고 하면?
value{key1: value1, key2: value2, ...}
-- 하위컴포넌트가 사용할 때
<MyContext.Consumer>
  {(value) => {
    return (~~~~);
  }}
</MyContext.Consumer>

==> 더좋은 사용방법 : useContext() 훅을 사용합니다.
사용법
const value = useContext(생성된컨텍스트이름);
const value = useContext(MyContext);

[ch15] 스타일링
- CSS
선택자 {
  속성1: 값1,
  속성2: 값2,
  ...
}
- 선택자: id선택자: '#id값', class선택자: '.클래스값', 타입선택자(태그): 태그이름 

화면배치(레이아웃)
div {
  display: none | block | inline | flex; (배치)
  visibility: visible | hidden; (화면에 보이게/안보이게)
  position: static(기본) | fixed(브라우저기준) | relative | absolute;
}
none와 hidden의 차이
- none: 블럭자체가 빠진것
- hidden: 블럭은 있지만 안보이는것(영역을 차지하고 있습니다.)
** 폰트와 관계된 속성
#title {
  font-family: 사용할 글꼴이름, , ; ,로 구분하여 지정(순서), 여러단어로 되어있는 폰트는 '', "" 묶어서 적어줍니다.
  font-size: 폰트크기;
  font-weight: 폰트굵기;
  font-style: none | italic;
  text-decoration: none | underline;
}
** 컬러
1. 16진수표현 #fff, #ffffff
2. rgb()
3. rgba()
4. 색상이름 : css3(140개의 색상이름 지원)

=== REACT에서 style을 CSS문법 그대로 적용하도록 만든
styled-components 라이브러리를 만들었습니다.
사용하려면 설치를 해야합니다.

yarn add styled-components [enter]

--styled-componets에서는 태그드 탬플릿 리터럴을 사용합니다.

*** Rract에서 스타일을 주려면 컴포넌트에 sytle속성에 {스타일값} 객체를 사용합니다.
예) <div style={{border: "1px solid black"}}></div>
스타일속성의 이름은 '-'를 사용할 수 없어서 '-'를 빼고 다음글자를 대문자로 적용합니다.
예) background-color  ->   backgroundColor
=> 불편하다.. 
그래서 만든것이 styled-components 라이브러리입니다.
사용예)
스타일이 적용되는 컴포넌트를 만든다.(이름의 첫글자를 대문자) 
styled.태그``; (태그 뒤에는 백틱사용 - 키보드 tap키 위에 있는 버튼)
const Wrapper = styled.div`
  border: 1px solid black;
  background-color: blue;
  color: white;
  ...
`;
백틱안에는 CSS문법과 동일하게 스타일을 적용하시면 됩니다.