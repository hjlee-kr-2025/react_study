<<< react(리액트)  >>>
HTML, CSS, JAVASCRIPT

MPA(Multi Page Application) vs SPA(Single Page Application)
MPA: 한 페이지당 HTML문서가 하나씩 있는것
SPA: HTML문서 하나에 내용을 바꿔가면서 다른페이지 인것처럼 사용하는 방식

DOM
react: virtual DOM => DOM을 가상의 공간에 만들고 HTML DOM 과 교체하는 방식으로 운용됩니다.

react -> v19에서 create-react-app 을 실행하면 오류발생
=> 대안
npm install -g yarn -> 한번만 실행하면 다음부터는 안해도 됩니다.(yarn설치 명령)
yarn create react-app my-app
으로 실행해서 사용하겠습니다.
my-app 은 프로젝트 명입니다. -> 혼자서생성해서 실습하시려면 이 이름만 변경해서 사용하시면 됩니다.

[ch03] JSX(JavaScript and XML)
const element = <h1>Hello, World!!</h1>;

JSX코드예)
class Hello extends React.Component {
  render() {
    return <div>Hello {this.props.toWhat}</div>;
  }
}
const root = ReactDOM.createRoot(document.getElementById('root));
root.render(<Hello toWhat="World" />);
==> JS 코드
class Hello extends React.Component {
  rendor() {
    return React.createElement('div', null, `Hello ${this.props.toWhat}`);
  }
}
const root = ReactDOM.create(document.getElementById('root'));
root.render(React.createElement(Hello, {toWhat:'World!'}, null));

Javascript:
const element = React.createElement(
  'h1',
  {className: 'greeting'},
  'Hello, World!'
)
==> JSX
const element = (
  <h1 className='greeting'>Hello, World!</h1>
)

리액트가 '<' 를 보는 순간 JSX 로 만들어 졌다라고 생각하고 프로그램이 진행됩니다.

JSX장점
1. 코드가 간결해집니다.
2. 가독성이 향상됩니다. (HTML코드와 비슷하다고 느낍니다.)
3. 보안성이 올라갑니다. (injection Attack을 방어어)


[ch04] 엘리먼트(element) 렌더링
Element란? 태그, 속성, Text로 이루어져 있는 가장 작은 단위
자바스크립트에 Element의 형태
{
  type: 'button',
  props: {
    className: 'bg-green',
    children: {
      type: 'b',
        props: {
          children: 'Hello, element!'
        }
    }
  }
}
<button class="bg-green">
  <b>Hello, element!</b>
</button>


[ch05] 컴포넌트(Component)와 Props
컴포넌트란? 
=> 붕어빵틀을 생각하시면 이해가 쉬울것 같습니다.
=> element를 만들기 위한 뼈대.
Props
=> 재료 : 붕어빵을 만들때 팥, 슈크림, 고구마등..
=> element를 만들때 사용하는 값
- 리액트 컴포넌트는 Props의 내용을 바꿀수 없습니다.

function App(props) {
  return (
    <Profile
      name='소플'
      introduction='안녕하세요'
      viewCount={1500}
    />
  );
}
javascript가 데이터를
{
  name: '소플',
  introduction: '안녕하세요',
  viewCount: 1500
}
JSON형식이라고 말합니다.

컴포넌트
- function 컴포넌트, class 컴포넌트
- 컴포넌트 이름의 첫글자는 반드시 대문자를 사용합니다.
  (소문자는 DOM(html) 태그로 인식합니다.)
- 컴포넌트를 만들때 최상단에는 하나의 element만 있어야 합니다.
컴포넌트 합성 그리고 추출

[ch06] State와 생명주기
-> Class 컴포넌트를 가지고 설명합니다.
state: 상태
 -> 리액트에서 state 컴포넌트의 상태를 의미합니다.
 -> 정상/비정상의 의미가 아니고 리액트의 데이터(변경가능한 데이터)
 -> 객체이다.
(생명주기)
사람 : 출생-> 인생 -> 사망
컴포넌트 : 생성(마운트) -> 렌더링 -> 언마운트


`(백틱기호)
백틱기호를 사용하는 경우는 변수와 문자열을 같이 표시할때 사용합니다.
*** (HTML)HTML에서 변수값을 화면에 표시할때 ${변수명} 으로 사용합니다.***
`${변수명} 텍스트내용` - 변수값과 텍스트내용을 한묶음으로 처리할때 백틱기호를 사용합니다. -> 자바스크립트에서
`${변수명} 텍스트내용` => 변수명 + ' 텍스트내용'(작은따옴표) 과 동일합니다.
function 함수명() {

}
if (조건문) {

}
while (조건문) {

}

JSON (JavaScript Object Notation) 형식
var jsonData =  {
                  key1: value1,
                  key2: value2,
                  key3: {
                    key4: value4,
                    key5: value5,
                  },
                }

[]는 배열에서 쓰입니다.
var numbers = [1, 2, 3, 4, 5];
numbers[0];


<React 1일차 정리>
1. React는 Component(컴포넌트) 구조로 되어있다.
2. 컴포넌트의 이름의 첫글자는 반드시 대문자여야 합니다.
  예) UserInfo, Button
    userInfo, button으로 첫글자를 소문자로 쓰면 HTML DOM(태그)로 인식합니다.
3. JSX 문법을 사용해서 코딩하면 간결하고, 가독성이 높습니다.
4. element는 한 번 생성되는 변하지 않습니다. -> 만약에 내용을 변경시키고자 할때? 새로운 element를 만들어서 기존 element와 change합니다.
5. props 로 넘어가는 데이터는 JSON 형태로 만들어 집니다.
6. JSON 데이터는 하나의 데이터가 key: value의 쌍으로 구성되어있고, 여러개의 데이터를 포함시키려면 ,로 구분합니다.
  {
    key: value,
    key2: value2,
    ....
  }
7. JSX에는 HTML형식으로 프로그래밍되는데, 모든요소가 시작태그와 종료태그가 있습니다.


React는 기본적으로 자바스크립트 코드를 사용합니다.
그런데 특별히 React.CreateElement() 함수가 실행되는 부분을 조금더 쉽게 코딩하기 위해 JSX를 추가하였습니다.
JSX예)
  <div>
    <h1>글제목</h1>
    <p>내용</p>
  </div>
  ===> 자바스크립트로 변경하면
  React.CreateElement(
    'div',null,
    {React.CreateElement(
      'h1', null, '글제목'
    ),
    React.CreateElement(
      'p', null, '내용'
    )}
  );